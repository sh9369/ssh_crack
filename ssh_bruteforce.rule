# =============================================================================
# This file defines the rule to detect the Brute-force Attack based on ssh traffic.
#
# ZHANG Li Dan <lidan.zhang@clearclouds-global.com>
# Nanjing Yunlilai (C) 2018-2019
# =============================================================================
import "security/ssh_crack/cfg/ssh_bruteforce_cfg.rule";
import "security/ssh_crack/cfg/%(__sys_lang__)/ssh_bruteforce.rule";


# -----------------------------------------------------------------------------
# Setup the timestamp so that query() function could use the save timestamp.
# -----------------------------------------------------------------------------
__now__ = now();


# -----------------------------------------------------------------------------
# __alert() - Output the alarm result.
# list:[{},{},...]
# This function returns the list itself for chain operation.
# -----------------------------------------------------------------------------
def __alert(list, args) {
	__subtype__      = args["subtype"];
	__level__        = args["level"];

	__desc_type__    = args["desc_type"];
	__desc_subtype__ = args["desc_subtype"];
	#__desc_action__  = args["desc_action"];
	#__desc_title__   = args["desc_title"];

	return alert(list);
}

# -----------------------------------------------------------------------------
# query_ssh_info() - 找出ssh流量中存在暴力破解的行为,发出info告警.
#
# @args: Configuration of per sip.
# -----------------------------------------------------------------------------
def query_ssh_info(res,args){
	tcp_indx= __TCP_index__;
	threshold_flow=args["flows"];

	sql = "
		SELECT   SUM(flow) AS flow
		FROM     $(tcp_indx)
		WHERE        last(%(__info_range__))
				 AND dport=22
				 AND timeout_state IN $(__timeout_crack__)
				 AND (inpacket-retransmit_in)<flow*$(__pkg_high__)
				 AND (inpacket-retransmit_in)>flow*$(__pkg_low__)
		GROUP BY 
				date_histogram(%(__info_range__)) AS @timestamp,
				sip, 
				dip
		LIMIT    100, 100
	";
	listRes = query(sql,"flow>=threshold_flow");
	# add dept info and sites info
	# sip dept info or site info
	tmp_siplis=item_values(listRes,"sip");
	geo_siplis=ipip(tmp_siplis);
	value_map(listRes,"sip",geo_siplis[0],"src_country");
	value_map(listRes,"sip",geo_siplis[1],"src_province");
	value_map(listRes,"sip",geo_siplis[2],"src_city");
	listRes=ip_map(listRes,"sip",__ip_dept__,"src_dept");
	# dip dept info or site info
	tmp_diplis=item_values(listRes,"dip");
	geo_diplis=ipip(tmp_diplis);
	value_map(listRes,"dip",geo_diplis[0],"dst_country");
	value_map(listRes,"dip",geo_diplis[1],"dst_province");
	value_map(listRes,"dip",geo_diplis[2],"dst_city");
	listRes=ip_map(listRes,"dip",__ip_dept__,"dst_dept");
	# alert
	__alert(listRes,args);
	#pprint(listRes);
	return listRes;
}

# -----------------------------------------------------------------------------
# query_ssh_warn() - 通过同时间段内的流量对比，发出warn告警.
#
# @args: Configuration of per sip.
# -----------------------------------------------------------------------------
def query_ssh_warn(listRes, args) {
	tcp_indx= __TCP_index__;
	threshold = args["threshold"];
	alert_list=[];
	sip_list=item_values(listRes,"sip");
	dip_list=item_values(listRes,"dip");
	# get es data
	sql = "
		SELECT	 SUM(flow) AS flow
		FROM     $(tcp_indx)
		WHERE    last(%(__info_range__))
				 AND (sip IN $(sip_list)) 
				 AND (dip IN $(dip_list))
		GROUP BY sip,dip
		LIMIT 100,100
		";
	res_ip = query(sql);
	# compare flow 
	applist=append_list(listRes,res_ip);
	newdict=list_to_dict(applist,["sip","dip"],"_");
	for key,value in newdict{
		if(len(value)==2){
			if(int(value[0]["flow"])>int(value[1]["flow"])){
				tmp=value[0]["flow"];
				value[0]["flow"]=value[1]["flow"];
				value[1]["flow"]=tmp;
			}
			if(fmt_float(value[0]["flow"])>=int(value[1]["flow"])*threshold){
				#pprint(item);
				alert_list=append(alert_list,value[0]);
			}
		}
	}

	__alert(alert_list,args);
	return alert_list;
}



# -----------------------------------------------------------------------------
# main() - Main entry of the rule.
# -----------------------------------------------------------------------------
def main() {
	func_list = [
		{ "name": "query_ssh_info",   "args": __cfg_info__ },
		{ "name": "query_ssh_warn",   "args": __cfg_warn__ }
	];

	call_list(func_list);
}


# -----------------------------------------------------------------------------
# Run the rule.
# -----------------------------------------------------------------------------
main();
