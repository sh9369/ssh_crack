# =============================================================================
# This file defines the rule to detect the login behaviour based on ssh traffic.
#
# ZHANG Li Dan <lidan.zhang@clearclouds-global.com>
# Nanjing Yunlilai (C) 2018-2019
# =============================================================================
import "security/ssh_crack/cfg/%(__sys_lang__)/ssh_login.rule";


# -----------------------------------------------------------------------------
# Setup the timestamp so that query() function could use the save timestamp.
# -----------------------------------------------------------------------------
__now__ = now();


# -----------------------------------------------------------------------------
# __alert() - Output the alarm result.
# list:[{},{},...]
# This function returns the list itself for chain operation.
# -----------------------------------------------------------------------------
def __alert(list, args) {
	__subtype__      = args["subtype"];
	__level__        = args["level"];

	__desc_type__    = args["desc_type"];
	__desc_subtype__ = args["desc_subtype"];
	#__desc_action__  = args["desc_action"];
	#__desc_title__   = args["desc_title"];

	return alert(list);
}

# -----------------------------------------------------------------------------
# query_ssh_login() - 找出ssh流量中存在登陆的行为.
#
# @args: Configuration of per sip.
# -----------------------------------------------------------------------------
def query_ssh_info(res,args){
	tcp_indx= __TCP_index__;
	in_ip=__inner_IP__;
	sql = "
		SELECT   SUM(flow) AS flow
		FROM     $(tcp_indx)
		WHERE        last(%(__info_range__))
				 AND dport=22
				 AND ip_ranges(dip,$(in_ip))
				 AND (inpacket-retransmit_in)/flow>30.0
				 AND (outpacket-retransmit_out)/flow>30.0
		GROUP BY 
				date_histogram(%(__info_range__)) AS @timestamp,
				sip, 
				dip
		LIMIT    10, 10
	";
	listRes = query(sql);
	#pprint(listRes);
	return listRes;
}

# -----------------------------------------------------------------------------
# query_alert_info() - 白名单清洗过滤后 info 告警.
#
# @args: Configuration of per sip.
# -----------------------------------------------------------------------------
def query_alert_info(listRes, args) {
	alert_list=[];
	tcp_indx= __TCP_index__;

	# white list filter
	whitelist=__whitelist__;
	all_iplist=whitelist["all"];
	# filter
	res_tmp=agg_items(listRes,"dip");
	for key,value in res_tmp{
		for itm in value{
			#pprint(itm);
			ip_tmp=itm["sip"];
			#pprint(key IN keys(whitelist));
			#pprint(ip_in(ip_tmp,whitelist[key]));
			#pprint(ip_tmp);
			# sip in all
			if(ip_in(ip_tmp,all_iplist)){
				continue;
			}
			# in other 
			flg=0;
			for ky in keys(whitelist){
				if(ip_in(key,ky)){
					if(ip_in(ip_tmp,whitelist[ky])){
						flg=1;
						continue;
					}
				}
			}
			# not in whitelist
			if(flg==0){
				pprint(itm);
				alert_list=append(alert_list,itm);
			}
		}
	}

	__alert(alert_list,args);
	return alert_list;
}



# -----------------------------------------------------------------------------
# query_ssh_warn() - 根据info告警找出sip曾在48小时内被标记为scan or bruteforce.
#
# @args: Configuration of per sip.
# -----------------------------------------------------------------------------
def query_ssh_warn(listRes,args){
	alert_indx= __alert_index__;
	in_ip=__inner_IP__;
	sip_tmp=agg_items(listRes,"sip");
	siplis=keys(sip_tmp);
	sql = "
		SELECT   SUM(flow) AS flow
		FROM     $(alert_indx)
		WHERE        last(%(__warn_range__))
				 AND (type='scan' OR subtype='brute_force')
				 AND sip IN $(siplis)
		GROUP BY sip
		LIMIT    100
	";
	res = query(sql);
	# get sip list
	res_tmp=item_values(res,"sip");
	for itm in res_tmp{
		values=sip_tmp[itm];
		__alert(values,args);
	}
	#pprint(listRes);
	return listRes;
}


# -----------------------------------------------------------------------------
# main() - Main entry of the rule.
# -----------------------------------------------------------------------------
def main() {
	func_list = [
		{ "name": "query_ssh_info",            "args": __cfg_info__ },
		{ "name": "query_alert_info",   "args": __cfg_info__ },
		{ "name": "query_ssh_warn",   "args": __cfg_warn__ }
	];

	call_list(func_list);
}


# -----------------------------------------------------------------------------
# Run the rule.
# -----------------------------------------------------------------------------
main();
